{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","type","id","types","concat","typeClass","map","typeArray","i","key","className","alt","src","style","textTransform","idZeros","CardList","pokemons","filter","pokemon","Scroll","props","overflowY","border","height","children","SearchBox","searchChange","placeholder","onChange","ErrorBoundry","state","hasError","this","setState","Component","App","fetchPokemons","a","fetchAll","Boolean","fetch","response","json","pokeurls","Promise","all","results","url","response2","promises","resp","data","allPokemons","onSearchChange","event","searchfield","target","value","getPokeByPage","page","Number","poke","pageUp","up","console","log","filteredPokemons","length","toLowerCase","includes","margin","href","rel","onClick","React","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ac7b531f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css'\r\n\r\nconst Card = ({name, type, id}) => {\r\n    \r\n    const types = [].concat(type);\r\n    let typeClass =   types.map(type => {\r\n        return type.type.name;\r\n    })\r\n\r\n    const typeArray = types.map((type, i) => <div key={i} className={'type ' + typeClass[i]}>{type.type.name}</div>);\r\n\r\n    const idZeros = (id) => {\r\n        if (id < 10){\r\n            return [0, 0];\r\n        } else if (id < 100) {\r\n            return 0;\r\n        }   else {\r\n            return;\r\n        }\r\n    }\r\n    return (\r\n        <div id='Card' className='tc bg-washed-yellow br3 pa3 ma2 bw2 shadow-5'>\r\n            <img alt={name} src={id <= 721 ? `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/versions/generation-vi/x-y/${id}.png` : `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/versions/generation-viii/icons/${id}.png`}></img>   \r\n                        <h2 className='name' style={{textTransform: \"capitalize\"}}>{name}</h2>\r\n            <div>\r\n                #{[idZeros(id), id]}\r\n                <br></br>\r\n                {typeArray}\r\n            </div>\r\n            \r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card'\r\nimport './CardList.css'\r\n\r\nconst CardList = ({pokemons}) => {\r\nreturn (\r\n<div className='CardList bg-gold'>\r\n{   pokemons.filter(pokemon => pokemon.id <= 893).map((pokemon, i) => {\r\n       return <Card \r\n                        key={i}\r\n                        name={pokemon.name}\r\n                        id={pokemon.id}\r\n                        type={pokemon.types}\r\n                        />;\r\n                       \r\n                        \r\n                        \r\n})}\r\n</div>\r\n)\r\n};\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style={{overflowY: 'scroll', border: '5px solid rgba(86, 148, 209, 0.3)', height:'700px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return(\r\n        <div className=\"pa2\">\r\n            <input \r\n            className=\"pa3 ba b--green bg-lightest-blue\"\r\n            type=\"search\" \r\n            placeholder=\"Search Pokemons\"\r\n            onChange={searchChange}\r\n            ></input>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false,\r\n        }\r\n    }\r\n\r\n    componentDidCatch() {\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n    return this.state.hasError ? \r\n            <h1>Oops, Something went wrong..</h1>\r\n            :\r\n            this.props.children;\r\n    }\r\n\r\n}\r\n\r\nexport default ErrorBoundry;","import React from 'react';\nimport CardList from '../components/CardList'\nimport Scroll from '../components/Scroll'\nimport SearchBox from '../components/SearchBox'\nimport ErrorBoundry from '../components/ErrorBoundry'\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n            pokemons: [],\n            allPokemons: [],\n            searchfield: '',\n            page: 0,\n                };\n};\n\n// First fetch\nasync componentDidMount() {\n      await this.fetchPokemons(false);\n      await this.fetchPokemons(true);\n}\n\nfetchPokemons = async (fetchAll=Boolean) => {\n  const response = await fetch(`https://pokeapi.co/api/v2/pokemon?offset=0&limit=${fetchAll? 893 : 20}`)\n  const pokeurls = await response.json();\n  const response2 = await Promise.all(pokeurls.results.map(url => {\n    return fetch(url.url);\n  }))\n  const promises = response2.map(async resp => await resp.json());\n  const data = await Promise.all(promises);\n  fetchAll ?\n  this.setState({ allPokemons : data })\n  :\n  this.setState({ pokemons : data })\n  \n}\n\nonSearchChange = (event) => {\n  this.setState({ searchfield: event.target.value });\n}\n\ngetPokeByPage = (page=Number) => {\n  this.setState({ page : page});\n  return this.state.allPokemons.filter((poke, i) => i >= page*20 && i < (page+1)*20);\n}\n\n\n\npageUp = async (up) => {\n  if(up && this.state.page < 44){\n    await this.setState({pokemons : this.getPokeByPage(this.state.page+1)\n    });\n  } else if (!up && this.state.page > 0) {\n    await this.setState({pokemons : this.getPokeByPage(this.state.page-1)});\n  }\n  console.log(this.state.page);\n}\n\n\n  render() {\n    const {pokemons, searchfield, allPokemons} = this.state;\n    const filteredPokemons = ((this.state.allPokemons.length > 0 && this.state.searchfield.length > 0)\n    ? \n    allPokemons : pokemons).filter(pokemon => {\n      return pokemon.name.toLowerCase().includes(searchfield.toLowerCase());\n    })\n\n\n    return (\n    <div className='app tc bg-red'>\n    <h1 className='f1' style={{margin:0}}>Pokedex!</h1>\n    <h3>Using the <a href='https://pokeapi.co/' target='_blank' rel='noopener noreferrer'>PokeAPI</a></h3>\n    <button onClick={() => {this.pageUp(false)}}>Previous page</button>\n    <button onClick={() => {this.pageUp(true)}}>Next page</button>\n    <p>Page: {this.state.page}</p>\n    <SearchBox searchChange={this.onSearchChange}/>\n    <Scroll>\n    <ErrorBoundry>\n    <CardList pokemons={filteredPokemons}/>\n    </ErrorBoundry>\n    </Scroll>\n    </div>)\n  }\n    \n  \n    \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}